{
  "frontend": [
    {
      "question": "What is the purpose of the HTML 'doctype' declaration?",
      "answer": "The 'doctype' declaration is an instruction to the web browser about what version of HTML the page is written in."
    },
    {
      "question": "What are meta tags in HTML?",
      "answer": "Meta tags provide metadata about the HTML document, such as descriptions, keywords, and author information, which can be used by browsers and search engines."
    },
    {
      "question": "What is the difference between block-level and inline elements in HTML?",
      "answer": "Block-level elements start on a new line and take up the full width available, while inline elements do not start on a new line and only take up as much width as necessary."
    },
    {
      "question": "What is the box model in CSS?",
      "answer": "The box model describes the rectangular boxes generated for elements in the document tree and consists of margins, borders, padding, and the actual content."
    },
    {
      "question": "What is the difference between 'class' and 'id' selectors in CSS?",
      "answer": "'Class' selectors are used to select multiple elements, while 'id' selectors are unique and used to select a single element."
    },
    {
      "question": "What is the purpose of media queries in CSS?",
      "answer": "Media queries allow the application of CSS styles based on the characteristics of the device, such as its width, height, or orientation."
    },
    {
      "question": "What is the difference between '==' and '===' operators in JavaScript?",
      "answer": "'==' compares two values for equality after converting both to a common type, while '===' compares both value and type without performing type conversion."
    },
    {
      "question": "What is a closure in JavaScript?",
      "answer": "A closure is a function that has access to its own scope, the scope of the outer function, and the global scope."
    },
    {
      "question": "What is event delegation in JavaScript?",
      "answer": "Event delegation is a technique of handling events by attaching a single event listener to a parent element to manage events for all of its child elements."
    },
    {
      "question": "What is the Virtual DOM in React?",
      "answer": "The Virtual DOM is a lightweight copy of the actual DOM that React uses to optimize updates and rendering by minimizing direct manipulation of the real DOM."
    },
    {
      "question": "What are props in React?",
      "answer": "Props are short for properties and are read-only attributes used to pass data from parent to child components in React."
    },
    {
      "question": "What is the difference between state and props in React?",
      "answer": "Props are read-only and passed from parent to child components, while state is a local data storage that is mutable and managed within the component."
    },
    {
      "question": "What is the purpose of the 'useState' hook in React?",
      "answer": "The 'useState' hook is a function that allows you to add state to functional components in React."
    },
    {
      "question": "What is the difference between 'let' and 'const' in JavaScript?",
      "answer": "'let' allows you to declare variables that can be reassigned, while 'const' declares variables that cannot be reassigned after their initial assignment."
    },
    {
      "question": "What is the purpose of the 'async' and 'await' keywords in JavaScript?",
      "answer": "'async' and 'await' are used to handle asynchronous operations in JavaScript, making it easier to work with promises."
    },
    {
      "question": "What is the difference between 'null' and 'undefined' in JavaScript?",
      "answer": "'undefined' means a variable has been declared but not assigned a value, while 'null' is an assignment value that represents no value."
    },
    {
      "question": "What is the purpose of the 'this' keyword in JavaScript?",
      "answer": "'this' refers to the object from which a function was called and its value depends on the context in which the function is invoked."
    },
    {
      "question": "What is the difference between 'for...of' and 'for...in' loops in JavaScript?",
      "answer": "'for...in' iterates over the enumerable properties of an object, while 'for...of' iterates over the values of an iterable object like an array."
    },
    {
      "question": "What is the purpose of the 'fetch' API in JavaScript?",
      "answer": "The 'fetch' API provides a modern interface for making HTTP requests in JavaScript, replacing the older 'XMLHttpRequest' approach."
    },
    {
      "question": "What is the difference between 'padding' and 'margin' in CSS?",
      "answer": "'Padding' is the space between the content and the border of an element, while 'margin' is the space between the border of an element and its neighboring elements."
    },
    {
      "question": "What is the difference between 'localStorage' and 'sessionStorage' in JavaScript?",
      "answer": "'localStorage' stores data with no expiration time, while 'sessionStorage' stores data for the duration of the page session."
    },
    {
      "question": "What is the purpose of the 'data-' attribute in HTML?",
      "answer": "The 'data-' attribute is used to store custom data private to the page or application, which can be accessed via JavaScript."
    },
    {
      "question": "What is the difference between 'inline', 'inline-block', and 'block' display properties in CSS?",
      "answer": "'inline' elements do not start on a new line and only take up as much width as necessary, 'block' elements start on a new line and take up the full width, and 'inline-block' elements are like 'inline' elements but can have width and height set."
    },
    {
      "question": " How do you convert a JavaScript object to JSON?",
      "answer":"Use JSON.stringify() to convert JavaScript Object to JSON"
    },
    {
      "question": "What is JSON Formatter, and how does it work?",
      "answer":"The JSON Formatter & Validator aids in debugging JSON data by formatting and validating it so that it can be read easily by humans."
    },
    {
      "question": "What is the purpose of the 'z-index' property in CSS?",
      "answer": "The 'z-index' property specifies the stack order of elements, allowing control over which elements appear on top of others."
    },
    {
      "question": "What is React?",
      "answer": "React is a JavaScript library for building user interfaces."
    },
    {
      "question": "What is the virtual DOM?",
      "answer": "The virtual DOM is a lightweight copy of the real DOM used to improve performance in React."
    },
    {
      "question": "What are React hooks?",
      "answer": "Hooks are functions in React that let you use state and lifecycle features in functional components."
    },
    {
      "question": "What is JSX?",
      "answer": "JSX is a syntax extension for JavaScript that allows you to write HTML-like code in React."
    },
    {
      "question": "What is the difference between a controlled and an uncontrolled component?",
      "answer": "A controlled component's state is managed by React, while an uncontrolled component maintains its own state via the DOM."
    }
  ],
  "backend": [
    {
      "question": "What is backend development?",
      "answer": "Backend development refers to the server-side development of applications. It involves managing databases, server logic, authentication, and APIs that handle client requests."
    },
    {
      "question": "What are the most commonly used backend programming languages?",
      "answer": "Some commonly used backend languages include JavaScript (Node.js), Python, Java, PHP, Ruby, and C#."
    },
    {
      "question": "What is an API?",
      "answer": "An API (Application Programming Interface) is a set of rules that allows different software applications to communicate with each other."
    },
    {
      "question": "What is RESTful API?",
      "answer": "A RESTful API follows the principles of Representational State Transfer (REST) and allows communication between client and server using HTTP methods like GET, POST, PUT, and DELETE."
    },
    {
      "question": "What is the difference between SQL and NoSQL databases?",
      "answer": "SQL databases are relational and use structured query language, whereas NoSQL databases are non-relational and handle unstructured or semi-structured data."
    },
    {
      "question": "What is authentication and authorization?",
      "answer": "Authentication verifies a user's identity, while authorization determines what resources a user has access to."
    },
    {
      "question": "What is middleware in backend development?",
      "answer": "Middleware is software that acts as an intermediary between different applications or components, often used for logging, authentication, and request processing."
    },
    {
      "question": "What are microservices?",
      "answer": "Microservices is an architectural style that structures an application as a collection of small, independent services that communicate via APIs."
    },
    {
      "question": "What is a load balancer?",
      "answer": "A load balancer distributes incoming network traffic across multiple servers to ensure availability and reliability."
    },
    {
      "question": "What is caching?",
      "answer": "Caching is the process of storing frequently accessed data in memory to improve response time and reduce database load."
    },
    {
      "question": "What is the difference between monolithic and microservices architecture?",
      "answer": "Monolithic architecture is a single, unified codebase, while microservices architecture divides an application into smaller, independent services."
    },
    {
      "question": "What is a database index?",
      "answer": "A database index is a data structure that improves the speed of data retrieval operations on a database table."
    },
    {
      "question": "What is an ORM?",
      "answer": "An ORM (Object-Relational Mapping) tool allows developers to interact with a database using object-oriented programming instead of raw SQL queries."
    },
    {
      "question": "What is the difference between synchronous and asynchronous processing?",
      "answer": "Synchronous processing waits for a task to complete before moving to the next, whereas asynchronous processing allows multiple tasks to run concurrently."
    },
    {
      "question": "What is JWT?",
      "answer": "JWT (JSON Web Token) is a compact, URL-safe token used for securely transmitting information between parties."
    },
    {
      "question": "What is GraphQL?",
      "answer": "GraphQL is a query language for APIs that allows clients to request only the data they need, reducing over-fetching of information."
    },
    {
      "question": "What is Docker?",
      "answer": "Docker is a platform for developing, shipping, and running applications in lightweight, isolated containers."
    },
    {
      "question": "What is Kubernetes?",
      "answer": "Kubernetes is an open-source container orchestration platform for automating deployment, scaling, and management of containerized applications."
    },
    {
      "question": "What are WebSockets?",
      "answer": "WebSockets provide a full-duplex communication channel over a single TCP connection, allowing real-time data exchange between client and server."
    },
    {
      "question": "What is a reverse proxy?",
      "answer": "A reverse proxy sits between client requests and backend servers, handling load balancing, caching, and security."
    },
    {
      "question": "What are environment variables?",
      "answer": "Environment variables store configuration settings such as API keys, database credentials, and server settings."
    },
    {
      "question": "What is rate limiting?",
      "answer": "Rate limiting restricts the number of requests a user can make to an API within a given timeframe to prevent abuse."
    },
    {
      "question": "What is database replication?",
      "answer": "Database replication is the process of copying and maintaining database records across multiple servers for redundancy and performance."
    },
    {
      "question": "What is a web server?",
      "answer": "A web server processes incoming requests and serves web pages or APIs to clients. Examples include Apache, Nginx, and IIS."
    },
    {
      "question": "What is a message queue?",
      "answer": "A message queue is a service that enables asynchronous communication between different application components by storing and forwarding messages."
    },
    {
      "question": "What is session management?",
      "answer": "Session management is the process of maintaining user state and authentication across multiple requests."
    },
    {
      "question": "What is SQL injection?",
      "answer": "SQL injection is a security vulnerability where an attacker manipulates SQL queries to access or modify a database."
    },
    {
      "question": "What is the difference between a GET and a POST request?",
      "answer": "A GET request retrieves data from a server, while a POST request sends data to the server to be processed."
    },
    {
      "question": "What is a webhook?",
      "answer": "A webhook is a user-defined HTTP callback that triggers an action when an event occurs."
    } 
  ],
  "fullstack": [
    {
      "question": "What is full-stack development?",
      "answer": "Full-stack development refers to the practice of working on both the front-end and back-end components of a web application. This includes developing user interfaces, server-side logic, databases, and integrating various services."
    },
    {
      "question": "What are the key responsibilities of a full-stack developer?",
      "answer": "A full-stack developer is responsible for designing and developing front-end interfaces, building and maintaining back-end services, managing databases, ensuring cross-platform optimization, and collaborating with other team members to deliver complete web solutions."
    },
    {
      "question": "Can you name some popular front-end technologies?",
      "answer": "Popular front-end technologies include HTML, CSS, JavaScript, and frameworks like React, Angular, and Vue.js."
    },
    {
      "question": "What are some commonly used back-end technologies?",
      "answer": "Common back-end technologies include Node.js, Express.js, Django, Ruby on Rails, and ASP.NET."
    },
    {
      "question": "What is RESTful API?",
      "answer": "A RESTful API is an application programming interface that adheres to the principles of Representational State Transfer (REST). It allows communication between client and server using standard HTTP methods like GET, POST, PUT, and DELETE."
    },
    {
      "question": "What is the purpose of version control systems?",
      "answer": "Version control systems, such as Git, are used to track changes in code, facilitate collaboration among developers, and manage different versions of a project efficiently."
    },
    {
      "question": "What is the difference between SQL and NoSQL databases?",
      "answer": "SQL databases are relational and use structured query language for defining and manipulating data. They are table-based and suitable for structured data. NoSQL databases are non-relational, can be document-based, key-value pairs, or graph databases, and are suitable for unstructured data."
    },
    {
      "question": "What is continuous integration and continuous deployment (CI/CD)?",
      "answer": "CI/CD is a set of practices that enable development teams to deliver code changes more frequently and reliably. Continuous integration involves automatically testing and integrating code changes, while continuous deployment involves automatically deploying the integrated code to production environments."
    },
    {
      "question": "What is the role of middleware in web development?",
      "answer": "Middleware is software that acts as a bridge between the front-end and back-end of an application. It handles tasks such as authentication, logging, and data transformation, facilitating communication and data management."
    },
    {
      "question": "Can you explain the concept of responsive design?",
      "answer": "Responsive design is an approach to web development that ensures web applications render well on a variety of devices and window or screen sizes. It involves using flexible layouts, images, and CSS media queries to adapt the UI accordingly."
    },
    {
      "question": "What is the Document Object Model (DOM)?",
      "answer": "The DOM is a programming interface for web documents. It represents the structure of a document as a tree of objects, allowing scripts to update the content, structure, and style of a document dynamically."
    },
    {
      "question": "What is the difference between synchronous and asynchronous programming?",
      "answer": "In synchronous programming, tasks are executed sequentially, and each task waits for the previous one to complete. In asynchronous programming, tasks can be executed concurrently, allowing the program to continue running while waiting for other tasks to complete."
    },
    {
      "question": "What is CORS, and why is it important?",
      "answer": "Cross-Origin Resource Sharing (CORS) is a security feature implemented by browsers that restricts web pages from making requests to a different domain than the one that served the web page. It is important for preventing unauthorized access to resources and ensuring secure interactions between different origins."
    },
    {
      "question": "What are web sockets?",
      "answer": "Web sockets are a communication protocol that provides full-duplex communication channels over a single TCP connection. They enable real-time interaction between a client and a server, allowing data to be sent and received simultaneously."
    },
    {
      "question": "What is the purpose of a package manager in web development?",
      "answer": "A package manager, such as npm or Yarn, is a tool that automates the process of installing, updating, configuring, and managing software packages or libraries, making it easier to manage project dependencies."
    },
    {
      "question": "Can you explain the concept of MVC architecture?",
      "answer": "Model-View-Controller (MVC) is a design pattern that separates an application into three interconnected components: the Model (data), the View (user interface), and the Controller (business logic). This separation facilitates modularity and makes the application easier to manage and scale."
    },
    {
      "question": "What is the purpose of using environment variables in an application?",
      "answer": "Environment variables are used to store configuration settings and sensitive information, such as API keys and database credentials, outside of the application's codebase. This enhances security and allows for different configurations across development, testing, and production environments."
    },
    {
      "question": "What is the difference between authentication and authorization?",
      "answer": "Authentication is the process of verifying the identity of a user or system, typically through credentials like usernames and passwords. Authorization determines the permissions and access levels granted to the authenticated user or system."
    },
    {
      "question": "What is a microservices architecture?",
      "answer": "Microservices architecture is an approach to software development where an application is composed of small, independent services that communicate over well-defined APIs. Each service is focused on a specific business function and can be developed, deployed, and scaled independently."
    },
    {
      "question": "What is the purpose of using a task runner or build tool in web development?",
      "answer": "Task runners and build tools, such as Gulp or Webpack, automate repetitive tasks like minification, compilation, unit testing, and linting, streamlining the development process and improving efficiency."
    },
    {
      "question": "Can you explain the concept of progressive web apps (PWAs)?",
      "answer": "Progressive Web Apps are web applications that provide a native app-like experience to users. They are built using standard web technologies but offer features like offline access, push notifications, and fast loading times, enhancing user engagement."
    },
    {
      "question": "What is the purpose of using a CSS preprocessor?",
      "answer": "CSS preprocessors, such as Sass or LESS, extend the capabilities of standard CSS by allowing the use of variables, nested rules, and functions. They make CSS more maintainable and enable more efficient styling workflows."
    },
    {
      "question": "What is the role of a reverse proxy in web applications?",
      "answer": "A reverse proxy is a server that sits between client devices and a web server, intercepting requests from clients. It can perform tasks such as load balancing, SSL termination, and caching, improving performance and security."
    },
    {
      "question": "What is the MERN stack?",
      "answer": "MERN stands for MongoDB, Express.js, React, and Node.js, used to build full-stack web applications."
    },
    {
      "question": "How do you handle authentication in a MERN stack app?",
      "answer": "Authentication can be handled using tools like JWT (JSON Web Token) or OAuth."
    },
    {
      "question": "What is the purpose of Redux in a full-stack app?",
      "answer": "Redux is used for state management in React applications."
    },
    {
      "question": "How does client-server communication work in the MERN stack?",
      "answer": "The client (React) sends requests to the server (Node.js and Express), which interacts with the database (MongoDB) to provide data."
    },
    {
      "question": "What is CORS and why is it needed?",
      "answer": "CORS (Cross-Origin Resource Sharing) is a security feature that allows or restricts resource sharing between different origins."
    },
    {
      "question": "What is the importance of HTTPS, and how does it work?",
      "answer": "HTTPS (HyperText Transfer Protocol Secure) ensures secure communication over a computer network by encrypting data between the client and server using SSL/TLS protocols. It protects against eavesdropping and man-in-the-middle attacks, ensuring data integrity and confidentiality."
    },
    {
      "question": "What are web components?",
      "answer": "Web components are a set of web platform APIs that allow developers to create reusable custom elements with encapsulated functionality and styling. They include Custom Elements, Shadow DOM, and HTML Templates."
    },
    {
      "question": "Can you explain the concept of lazy loading?",
      "answer": "Lazy loading is a design pattern that delays the initialization of resources until they are needed. In web development, it often refers to deferring the loading of non-critical resources, such as images or scripts, to improve initial loading performance."
    },
    {
      "question": "What is the purpose of using Docker in development?",
      "answer": "Docker is a platform that enables developers to create, deploy, and run applications in containers. Containers package an application with all its dependencies, ensuring consistency across different environments and simplifying deployment."
    },
    {
      "question": "Can you explain the concept of serverless architecture?",
      "answer": "Serverless architecture is a cloud computing execution model where the cloud provider dynamically manages the allocation of machine resources. Developers write code in the form of functions, and the provider handles the execution, scaling, and management, allowing developers to focus on code without managing servers."
    }
  ],
  "database": [
    {
      "question": "What is a Database?",
      "answer": "A database is an organized collection of structured information, or data, typically stored electronically in a computer system. It allows for efficient retrieval, insertion, and deletion of data."
    },
    {
      "question": "What is a Database Management System (DBMS)?",
      "answer": "A DBMS is software that interacts with end-users, applications, and the database itself to capture and analyze data. It provides tools to define, create, maintain, and control access to the database."
    },
    {
      "question": "What is the difference between DBMS and RDBMS?",
      "answer": "DBMS stores data as files without enforcing relationships between tables, while RDBMS stores data in tables with enforced relationships using primary and foreign keys, supporting data integrity."
    },
    {
      "question": "What is SQL?",
      "answer": "Structured Query Language (SQL) is a standard programming language used to manage and manipulate relational databases by performing tasks such as querying, updating, and managing data."
    },
    {
      "question": "What are the different types of SQL statements?",
      "answer": "SQL statements are categorized into: Data Definition Language (DDL), Data Manipulation Language (DML), Data Control Language (DCL), and Transaction Control Language (TCL)."
    },
    {
      "question": "What is normalization?",
      "answer": "Normalization is the process of organizing data in a database to reduce redundancy and improve data integrity by dividing large tables into smaller, related tables."
    },
    {
      "question": "What is denormalization?",
      "answer": "Denormalization is the process of combining normalized tables to improve database read performance, often at the expense of write performance and data redundancy."
    },
    {
      "question": "What are the different normal forms?",
      "answer": "The normal forms include: First Normal Form (1NF), Second Normal Form (2NF), Third Normal Form (3NF), and Boyce-Codd Normal Form (BCNF), each addressing specific types of redundancy and dependency issues."
    },
    {
      "question": "What is a primary key?",
      "answer": "A primary key is a unique identifier for a record in a table, ensuring that each record can be uniquely identified. It must contain unique values and cannot contain NULLs."
    },
    {
      "question": "What is a foreign key?",
      "answer": "A foreign key is a field (or collection of fields) in one table that uniquely identifies a row of another table, establishing a relationship between the two tables."
    },
    {
      "question": "What is an index?",
      "answer": "An index is a database object that improves the speed of data retrieval operations on a table by providing quick access to rows, similar to an index in a book."
    },
    {
      "question": "What are the types of indexes?",
      "answer": "Common types of indexes include: Unique Index, Composite Index, and Clustered Index, each serving different purposes in optimizing query performance."
    },
    {
      "question": "What is a view?",
      "answer": "A view is a virtual table based on the result set of a SQL query. It contains rows and columns like a real table but does not store the data itself."
    },
    {
      "question": "What is a stored procedure?",
      "answer": "A stored procedure is a precompiled collection of SQL statements and optional control-of-flow statements stored under a name and processed as a unit, allowing for reusable and efficient code execution."
    },
    {
      "question": "What is a trigger?",
      "answer": "A trigger is a database object that automatically executes a specified set of SQL statements when certain events occur, such as INSERT, UPDATE, or DELETE operations on a table."
    },
    {
      "question": "What is ACID compliance?",
      "answer": "ACID stands for Atomicity, Consistency, Isolation, and Durability. It is a set of properties that ensure reliable processing of database transactions."
    },
    {
      "question": "What is a transaction?",
      "answer": "A transaction is a sequence of one or more SQL operations treated as a single unit of work, ensuring that all operations are completed successfully or none are applied."
    },
    {
      "question": "What is a JOIN?",
      "answer": "A JOIN is an SQL operation used to combine rows from two or more tables based on a related column between them."
    },
    {
      "question": "What are the types of JOINs?",
      "answer": "Common types of JOINs include: INNER JOIN, LEFT JOIN (or LEFT OUTER JOIN), RIGHT JOIN (or RIGHT OUTER JOIN), and FULL JOIN (or FULL OUTER JOIN)."
    },
    {
      "question": "What is a subquery?",
      "answer": "A subquery is a query nested within another SQL query, used to perform operations that require multiple steps or to filter results based on complex conditions."
    },
    {
      "question": "What is a schema?",
      "answer": "A schema is a logical container for database objects such as tables, views, and procedures, defining how data is organized and how relationships among data are associated."
    },
    {
      "question": "What is MongoDB?",
      "answer": "MongoDB is a NoSQL database used for storing data in the form of documents."
    },
    {
      "question": "What is the difference between SQL and NoSQL databases?",
      "answer": "SQL databases use structured tables, while NoSQL databases store data in a flexible, document-oriented format."
    },
    {
      "question": "How Does MongoDB Differ from Traditional SQL Databases?",
      "answer":"MongoDB is a NoSQL database which means it does not use the traditional table-based relational database structure. Instead of it uses a flexible and document-oriented data model that stores data in BSON (Binary JSON) format. Unlike SQL databases that use rows and columns, MongoDB stores data as JSON-like documents, making it easier to handle unstructured data and providing greater flexibility in terms of schema design."
    },
    {
      "question":"What is a document in MongoDB?",
      "answer":"A document is the basic unit of data in MongoDB, similar to a row in a relational database. It is a JSON-like structure comprising key-value pairs, allowing nested arrays and objects."
    },
    {
      "question":"What is mongo?",
      "answer":"mongo is a command-line shell that connects to a MongoDB instance and allows users to interact with the database by running queries and commands."
    },
    {
      "question":"What are Collections And Databases In MongoDB?",
      "answer": "Database: A container for collections, equivalent to a database in SQL. Collection: A group of documents, similar to tables in SQL, but schema-less. For example, a users collection can be part of the mydatabase database."
    },
    {
      "question":"Explain the Basic Syntax of MongoDB CRUD Operations.",
      "answer": "Create: db.collection.insertOne({}) Read: db.collection.find({}) Update: db.collection.updateOne({  }, { $set: { age: 26 } }) Delete: db.collection.deleteOne({ })"
    },
    {
      "question":"Explain the Concept of Write Concern and Its Importance in MongoDB",
      "answer": "Write Concern in MongoDB refers to the level of acknowledgment requested from MongoDB for write operations. It determines how many nodes must confirm the write operation before it is considered successful. Write concern levels range from acknowledged (default) to unacknowledged, journaled, and various replica acknowledged levels. The importance of write concern lies in balancing between data durability and performance. Higher write concern ensures data is safely written to disk and replicated, but it may impact performance due to the added latency."
    },
    {
      "question":"Describe the MongoDB Compass Tool and Its Functionalities",
      "answer":"MongoDB Compass is a graphical user interface (GUI) tool for MongoDB that provides an easy way to visualize, explore, and manipulate your data. It offers features such as: Schema Visualization: View and analyze your data schema, including field types and distributions., Query Building: Build and execute queries using a visual interface., Aggregation Pipeline: Construct and run aggregation pipelines., Index Management: Create and manage indexes to optimize query performance., Performance Monitoring: Monitor database performance, including slow queries and resource utilization., Data Validation: Define and enforce schema validation rules to ensure data integrity., Data Import/Export: Easily import and export data between MongoDB and JSON/CSV files."
    }
  ],
  "logical": [
    {
      "question": "How do you reverse a string in place?",
      "answer": "To reverse a string in place, you can swap characters from the beginning and end moving towards the center. For example, in Python: `s = list(s); s.reverse(); s = ''.join(s)`."
    },
    {
      "question": "How can you determine if a string is a palindrome?",
      "answer": "A string is a palindrome if it reads the same backward as forward. You can check this by comparing the string to its reverse: `s == s[::-1]` in Python."
    },
    {
      "question": "How do you find the maximum occurring character in a string?",
      "answer": "Use a hash map to count the frequency of each character, then iterate through the map to find the character with the highest count."
    },
    {
      "question": "How do you implement a binary search algorithm?",
      "answer": "Binary search involves repeatedly dividing a sorted array in half to locate a target value. Start with the middle element; if it matches the target, return its index. If the target is less, search the left half; if more, search the right half."
    },
    {
      "question": "How do you find the missing number in a given integer array of 1 to 100?",
      "answer": "Calculate the expected sum of numbers from 1 to 100 using the formula `n*(n+1)/2`. Subtract the actual sum of the array from this expected sum to find the missing number."
    },
    {
      "question": "How do you find the largest and smallest number in an unsorted integer array?",
      "answer": "Initialize two variables to store the largest and smallest numbers. Iterate through the array, updating these variables accordingly."
    },
    {
      "question": "How do you implement the Fibonacci sequence using recursion?",
      "answer": "Define a recursive function where the base cases return 0 and 1 for the first two Fibonacci numbers. For other cases, return the sum of the function called with the two preceding numbers."
    },
    {
      "question": "How do you check if two strings are anagrams of each other?",
      "answer": "Two strings are anagrams if they contain the same characters in the same frequency. Sort both strings and compare them; if they are equal, they are anagrams."
    },
    {
      "question": "How do you implement a depth-first search (DFS) in a binary tree?",
      "answer": "DFS can be implemented using recursion or a stack. Traverse the tree by exploring as far as possible along each branch before backtracking."
    },
    {
      "question": "How do you implement a breadth-first search (BFS) in a binary tree?",
      "answer": "BFS can be implemented using a queue. Start at the root and explore each neighbor before moving on to their children."
    },
    {
      "question": "How do you detect a cycle in a linked list?",
      "answer": "Use two pointers, slow and fast. Move the slow pointer one step and the fast pointer two steps at a time. If they meet, there's a cycle."
    },
    {
      "question": "How do you find the intersection point of two linked lists?",
      "answer": "Calculate the lengths of both lists. Advance the pointer of the longer list by the difference in lengths, then move both pointers until they meet."
    },
    {
      "question": "How do you implement a stack using queues?",
      "answer": "Use two queues. For the push operation, enqueue the element to the first queue. For the pop operation, dequeue all elements from the first queue except the last one, enqueue them to the second queue, then dequeue the last element."
    },
    {
      "question": "How do you implement a queue using stacks?",
      "answer": "Use two stacks. For the enqueue operation, push the element onto the first stack. For the dequeue operation, if the second stack is empty, pop all elements from the first stack and push them onto the second stack, then pop from the second stack."
    },
    {
      "question": "How do you find the first non-repeating character in a string?",
      "answer": "Use a hash map to count the frequency of each character. Iterate through the string, and the first character with a count of one is the non-repeating character."
    },
    {
      "question": "How do you find the longest substring without repeating characters?",
      "answer": "Use a sliding window approach with two pointers. Move the right pointer to expand the window and the left pointer to shrink it when a duplicate character is found, keeping track of the maximum length."
    },
    {
      "question": "How do you merge two sorted arrays?",
      "answer": "Create a new array to hold the merged result. Use two pointers to traverse both arrays, adding the smaller element to the new array and advancing the corresponding pointer."
    },
    {
      "question": "How do you find the common elements in two arrays?",
      "answer": "Use a hash set to store elements of the first array. Iterate through the second array, and for each element that exists in the set, add it to the result."
    },
    {
      "question": "How do you implement a singleton pattern in a programming language?",
      "answer": "Ensure that a class has only one instance and provide a global point of access to it. This can be done by making the constructor private and providing a static method that returns the instance."
    },
    {
      "question": "How do you reverse a linked list?",
      "answer": "Iterate through the linked list, reversing the pointers of each node to point to the previous node instead of the next."
    },
    {
      "question": "How do you check if a binary tree is balanced?",
      "answer": "A binary tree is balanced if the height difference between the left and right subtrees of any node is no more than one. Use a recursive function to check this condition for each node."
    },
    {
      "question": "How do you find the lowest common ancestor (LCA) of two nodes in a binary tree?",
      "answer": "Use a recursive approach to traverse the tree. If either node matches the root, return the root. Otherwise, recurse into the left and right subtrees. The LCA is where one node is found in the left subtree and the other in the right."
    },
    {
      "question": "How do you implement a hash table?",
      "answer": "Use an array of a fixed size and a hash function to map keys to indices. Handle collisions using methods like chaining (linked lists) or open addressing."
    },
    {
      "question": "How do you perform an in-order traversal of a binary search tree?",
      "answer": "In-order traversal visits nodes in ascending order. Recursively traverse the left subtree, visit the root node, and then traverse the right subtree."
    },
    {
      "question": "How do you implement a priority queue?",
      "answer": "A priority queue can be implemented using a heap data structure, where elements are added with an associated priority, and the element with the highest priority is served before others."
    },
    {
      "question": "How do you find the median of two sorted arrays?",
      "answer": "To find the median of two sorted arrays, you can use a binary search approach to partition the arrays such that the left halves contain the smaller elements and the right halves contain the larger elements. The median will be the maximum of the left halves or the minimum of the right halves, depending on the total number of elements."
    },
    {
      "question": "How do you detect and remove a loop in a linked list?",
      "answer": "To detect a loop, use Floyd's Cycle-Finding Algorithm with two pointers (slow and fast). Once a loop is detected, reset one pointer to the head and move both pointers one step at a time until they meet; the meeting point is the start of the loop. To remove the loop, find the node just before the start of the loop and set its next pointer to null."
    },
    {
      "question": "How do you implement an LRU (Least Recently Used) cache?",
      "answer": "An LRU cache can be implemented using a combination of a hash map and a doubly linked list. The hash map provides O(1) access to cache entries, and the doubly linked list maintains the order of usage, allowing for efficient updates when entries are accessed or evicted."
    },
    {
      "question": "How do you find the kth largest element in an unsorted array?",
      "answer": "You can use the Quickselect algorithm, which is a selection algorithm to find the kth smallest (or largest) element in an unordered list. It has an average-case time complexity of O(n)."
    },
    {
      "question": "How do you serialize and deserialize a binary tree?",
      "answer": "Serialization involves converting a binary tree into a string representation, typically using preorder or level-order traversal with markers for null nodes. Deserialization involves reconstructing the binary tree from this string representation."
    },
    {
      "question": "How do you implement a trie (prefix tree)?",
      "answer": "A trie is a tree-like data structure where each node represents a character of a string. It is used to store a dynamic set of strings, where each path down the tree may represent a word or a prefix."
    },
    {
      "question": "How do you perform a topological sort on a directed acyclic graph (DAG)?",
      "answer": "Topological sorting can be performed using Depth-First Search (DFS). During the DFS, vertices are added to a stack upon completion of their recursive calls. The stack then represents the topological order."
    },
    {
      "question": "How do you find the longest common subsequence of two strings?",
      "answer": "Use dynamic programming to build a 2D table where each entry represents the length of the longest common subsequence for substrings of the two input strings up to that point."
    },
    {
      "question": "How do you implement the Tower of Hanoi algorithm?",
      "answer": "The Tower of Hanoi problem can be solved using recursion. The idea is to move n-1 disks from the source rod to an auxiliary rod, then move the nth disk to the destination rod, and finally move the n-1 disks from the auxiliary rod to the destination rod."
    }
  ],
  "aptitude": [
    {
      "question": "What is 15% of 200?",
      "answer": "15% of 200 is 30."
    },
    {
      "question": "If a product costs $120 after a 20% discount, what was the original price?",
      "answer": "The original price was $150."
    },
    {
      "question": "A person covers 120 km in 3 hours. What is their speed?",
      "answer": "The speed is 40 km/h."
    },
    {
      "question": "What is the square root of 144?",
      "answer": "The square root of 144 is 12."
    },
    {
      "question": "If the sum of two numbers is 50 and their difference is 10, what are the numbers?",
      "answer": "The numbers are 30 and 20."
    }
  ],
  "hr": [
    {
      "question": "Tell me about yourself.",
      "answer": "Provide a brief summary of your education, work experience, and achievements."
    },
    {
      "question": "Why do you want to work for our company?",
      "answer": "Express enthusiasm for the company’s mission, values, or recent achievements."
    },
    {
      "question": "What are your strengths and weaknesses?",
      "answer": "Highlight relevant strengths and mention a minor weakness with steps you're taking to improve."
    },
    {
      "question": "Where do you see yourself in five years?",
      "answer": "Explain your career goals and how they align with the company's vision."
    },
    {
      "question": "How do you handle pressure?",
      "answer": "Describe strategies like prioritizing tasks, staying calm, and seeking support when needed."
    }
  ]
}
